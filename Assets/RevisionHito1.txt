Revisión realizada del contenido existente hasta el 17 de Marzo. Commit 31fc645 : "Añadido Prefab Mapa1"

/*\ Esta revisión representa una lista de cosas pendientes por hacer (items) referentes a la programación existente hasta la fecha. 
    La idea es ir borrando los items cuando se hayan hecho hasta dejar el script "vacío" antes de empezar la fase de diseño/testing.
    ** este símbolo representa que el *.cs en cuestión tiene más de un item pendiente. 

/*\ if(Limpiar código) *.cs = tiene espacios innecesarios y/o comentarios que necesitan ser borrados y/o código movido.
			       	  Mantener estructura limpia, iguales para todos los scripts y lo más legible posible.

/*\ Necesario establecer un "orden" a los comentarios no-summarys, llegar a un acuerdo sobre su estructura y reordenarlos.

/*\ Opcional, someter a votación: Crear un componente para gestionar los cambios en todos los controles de las mecánicas de los jugadores.
			      	  Además se podrá usar este componente para gestionar los cambios desde el menú y hacer controles configurables,
				  facilitaría la labor de QA y aportaría una visión global y sencilla de todos los enlaces de las mecánicas.

			      	  Crear otro similar para los datos "configurables" (atributos) referentes a poderes y power ups. 
			      	  Esto facilitaría inmensamente la labor de QA y la gestión de todos los parámetros de forma simple y rápida.


---------------------------------MANAGERS JUEGO-----------------------------
																															   \
///GameManager.cs///		-> ** Limpiar código.																				|
				   ** Hacer método para cambiar escenas.																		| --->No hacer aún por temas de terminar el 1er nivel
				   ** NombreEscena() Parametrizar e informar desde método para cambiar escena, adaptar cuando esté hecho.		|
				   ** Implementar gestión de torneos.																			|
																															   /
///UI.cs///			-> ** Limpiar código.
				   ** Cambiar tamaño de array 6 a por defecto.																	\  HECHO!										
				   ** Implementar método para el control de la posesión de la llave												/

---------------------------------ENEMIGOS-----------------------------------

///AtaquePanzudo.cs///  	-> Its ok.

///GoombaStun.cs///		-> Its ok.

///MovimientoCollider.cs///	-> Its ok.

///MovimientoEnemigos.cs///	-> Limpiar código.

///Rebote.cs///			-> Its ok.

///SeguirObjetivo.cs///		-> ** Añadir offset respecto al jugador que sigue.
				   ** Calcular nueva velocidad al "perseguir" para que el jugador tenga opción a escapar.

///VisionVigilante.cs///	-> Reubicar variable "est" encima del "código" donde se usa. \  HECHO!		

-----------------------------------MAPA-----------------------------------


///Guillotina.cs///		-> Limpiar código. \  HECHO!		

///Llegada.cs///		-> Its ok.

///Pared.cs///			-> Its ok.

///Paredes.cs///		-> Adaptar llamada a EstaEnPared() por método de cambiar bool de "congelado" cuando este sea generalizado.

				   Dato: Estudiar y llegar a un consenso sobre los nombres Pared.cs, Paredes.cs, Muro de enums, etc. se crea confusión.
  
///Tuberia.cs///		-> Adaptar código para controlar desde Unity cuando se empieza a caer la tuberia.
	

---------------------------------JUGADOR------------------------------------

+++Mejoras+++

 	 ///MejoraFantasma.cs///	-> Its ok.
	 ///MejoraPico.cs///		-> Its ok.
	 ///MejoraVelocidad.cs///	-> Its ok.

+++Poderes+++

 	///CogerGemas.cs///		-> Its ok.

 	///CubitoHielo.cs///		-> Its ok.

  	///Neblina.cs///		-> Its ok pero el método que usa de PC desactiva el freeze ya que este no es genérico.

 	///PoderesManager.cs///		-> ** Adaptar Neblina y muro al tener el prefab mapa que se instancie. Borrar GO innecesarios tras el cambio.
					   ** Rehabilitar muro y random a la normalidad.
					   ** Limpiar código
					   ** ConfiguraCoordenadasPoderes(). Adaptar método cuando GameManager tenga lo de cambiar escenas e informar.
					   ** ActivaInvierteControles() trabaja con CambioPoderes de Controlador, adaptar código.
					   ** DesactivaInvierteControles() igual que el anterior.

+++Respawn+++

  	///CambiarSpawn.cs///		-> Arreglar para que pille la última posición, no la primera. Solución: Crear while en el OnTriggerEnter o cambiar enter por exit.	  \  HECHO!	 Enter-->Exit + Disposición del pivote

  	///Respawn.cs///		-> ** CambiarPos nombre poco representativo. Cambiar a otro (x.ejem: RespawnJugador, JugadorASpawn, etc.).  \  HECHO!		
				           ** Limpiar código.

  	///ZonaMuerte.cs///		-> Llamada a ReseteaStats innecesaria, ya lo hace el método DesactivaControles y llama a este justo después.  \  HECHO!		


///BanderaRodar.cs///		-> Limpiar código.  \  HECHO!		

///Camara.cs///			-> Its ok.

///CheckSalto.cs///		-> Variable de controlador que se usa no se usa de forma local en el método, está siempre en memoria y es innecesario.    \  HECHO!		

///ControladorJugador.cs///	-> ** Limpiar código
				   ** Revisar número de variables.   \  HECHO!		
				   ** Cambiar booleana congelado por algo más genérico. (Existe estadoControles en el script y creo que cumple la misma función) <--NO CAMBIAR (sometido a votación)
				   ** Adaptar CambiosPerdidaControl(), parámetros no genéricos.
				   ** Quitar del script método CambiosPoderes().
				   ** PonerDePie() comentar método.				\  HECHO!		
				   ** CheckCC comentar método. Nombre crea confusión. \  HECHO!		

///EstadoFantasma.cs///		-> Its ok. 

///PerdidasControl.cs///	-> ** ActivaMOdificaVelocidad(): quitar invoke para desactivar o parametrizar el tiempo para generalizar uso con otras interacciones.
				   ** segundosModificaVelocidad, quitar variable global y parametrizar método en el que se utiliza o hacer que su valor
								se pueda modificar desde fuera para que otras interacciones puedan usarlo y reducir código.
				  Dato: Revisar seriamente las interacciones de las velocidades, se está modificando desde varios sitios diferentes 
 					por diferentes vías. Generalizar y reutilizar!!!

///RomperParedes.cs///		-> Variable global capa no es necesaria tenerla pública ni en memoria ya que la podemos especificar desde el propio método a menos
					que la intención sea que el diseñador pueda elegir la capa pero no le veo sentido ya que solo existe una capa para eso y además
					esta capa solo actúa para estas paredes por lo que se podría especificar desde código. <-----La variable está para que en cada Update no se haga un GetMask...Guille nos enseño así xD

///SaltoParedes.cs///		-> Its ok. Mejora opcional: Implementar un segundo cálculo de físicas específico para SaltoParedes en vez de usar AddForce.
